{"version":3,"sources":["store/store.ts","components/AddTodo.tsx","components/TodoListItem.tsx","components/TodoList.tsx","components/CommandBar.tsx","App.tsx","serviceWorker.ts","store/subscriptions.ts","store/events.ts","index.tsx"],"names":["createStore","add","id","items","filter","toggle","event","get","onEvent","subscribe","update","useSquawk","AddTodo","_useState","useState","_useState2","Object","slicedToArray","text","setText","done","react_default","a","createElement","value","onKeyDown","_ref","keyCode","onChange","_ref2","currentTarget","TodoListItem","item","type","checked","concat","htmlFor","TodoList","map","TodoListItem_TodoListItem","key","CommandBar","onClick","window","confirm","App","AddTodo_AddTodo","CommandBar_CommandBar","TodoList_TodoList","Boolean","location","hostname","match","todo","toConsumableArray","objectSpread","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iLAqBqEA,YAA8B,CAC/FC,IAAK,KACLC,GAAI,EACJC,MAAO,GACPC,OAAQ,MACRC,OAAQ,OALGC,UAAOC,QAAKC,YAASC,cAAWC,WAAQC,cClB1CC,EAAU,WAAM,IAAAC,EACDC,mBAAS,IADRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBK,EADkBH,EAAA,GACZI,EADYJ,EAAA,GAUnBd,EAAM,WACJiB,IAIJR,EAAO,MAAO,CAAEU,MAAM,EAAOlB,GAAI,EAAGgB,SACpCC,EAAQ,MAGZ,OAAOE,EAAAC,EAAAC,cAAA,SACHC,MAAON,EACPO,UAAW,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAlBH,KAkByBA,GAdpC1B,KAeA2B,SAAU,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,cAAH,OAAuBX,EAAQW,EAAcN,WClBlDO,EAAe,SAAAL,GAAqB,IAAlBM,EAAkBN,EAAlBM,KAK3B,OAAOX,EAAAC,EAAAC,cAAA,UACHF,EAAAC,EAAAC,cAAA,SAAOU,KAAK,WAAWC,QAASF,EAAKZ,KAAMlB,GAAE,QAAAiC,OAAUH,EAAK9B,IAAM0B,SAAU,WAJ5ElB,EAAO,SAAUsB,EAAK9B,OAKtBmB,EAAAC,EAAAC,cAAA,SAAOa,QAAO,QAAAD,OAAUH,EAAK9B,KAAO8B,EAAKd,QCVpCmB,EAAW,WAAM,IAClBlC,EAAUQ,EAAU,SAApBR,MACR,OAAOkB,EAAAC,EAAAC,cAAA,UACFpB,EAAMmC,IAAI,SAAAN,GAAI,OAAIX,EAAAC,EAAAC,cAACgB,EAAD,CAAcC,IAAKR,EAAK9B,GAAI8B,KAAMA,QCJhDS,EAAa,WAatB,OAAOpB,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,UAAQmB,QAAS,WAZdC,OAAOC,QAAQ,oDACdtC,EAAM,eAWV,cACAe,EAAAC,EAAAC,cAAA,UAAQmB,QAAS,WAPdC,OAAOC,QAAQ,8DACdtC,EAAM,qBAMV,0BCHOuC,EAVO,WACpB,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAACyB,EAAD,QCEcC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,6EChBN3C,EAAU,MAAO,SAAA4C,GACTA,IAIJA,EAAKnD,GAAKK,EAAI,MAEdG,EAAO,SAAAgB,GAAA,IAAGvB,EAAHuB,EAAGvB,MAAH,MAAgB,CACnBD,GAAImD,EAAKnD,GAAK,EACdC,MAAK,GAAAgC,OAAAnB,OAAAsC,EAAA,EAAAtC,CAAMb,GAAN,CAAakD,UAI1B5C,EAAU,SAAU,SAAAP,GACZA,GAIJQ,EAAO,QAAS,SAAAP,GAAK,OACjBA,EAAMmC,IAAI,SAAAN,GAAI,OAAAhB,OAAAuC,EAAA,EAAAvC,CAAA,GACJgB,EADI,CACEZ,KAAMY,EAAK9B,KAAOA,GAAM8B,EAAKZ,KAAOY,EAAKZ,aCpBjEZ,EAAQ,YAAa,kBAAME,EAAO,CAAEP,MAAO,GAAID,GAAI,MAEnDM,EAAQ,kBAAmB,kBAAME,EAAO,QAAS,SAAAP,GAAK,OAAIA,EAAMC,OAAO,SAAA4B,GAAI,OAAKA,EAAKZ,WCKrFoC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SHgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b29952b6.chunk.js","sourcesContent":["import createStore from \"squawk-react\";\r\n\r\nexport interface TodoItem {\r\n    id: number;\r\n    text: string;\r\n    done: boolean;\r\n}\r\n\r\ntype Filter = \"all\" | \"pending\" | \"completed\";\r\n\r\ntype Events = \"clear-all\" | \"clear-completed\" | \"complete-all\";\r\n\r\ninterface AppState {\r\n    add: TodoItem | null;\r\n    id: number;\r\n    items: TodoItem[];\r\n    filter: Filter;\r\n    toggle: number | null;\r\n}\r\n\r\n// Set up initial value of store\r\nexport const { event, get, onEvent, subscribe, update, useSquawk } = createStore<AppState, Events>({\r\n    add: null,\r\n    id: 1,\r\n    items: [],\r\n    filter: \"all\",\r\n    toggle: null\r\n});","import React, { useState } from \"react\";\r\nimport { update } from \"../store/store\";\r\n\r\nexport const AddTodo = () => {\r\n    const [text, setText] = useState(\"\");\r\n    const keydown = (key: number) => {\r\n        if(key !== 13) {\r\n            return;\r\n        }\r\n\r\n        add();\r\n    }\r\n\r\n    const add = () => {\r\n        if(!text) {\r\n            return;\r\n        }\r\n\r\n        update(\"add\", { done: false, id: 0, text });\r\n        setText(\"\");\r\n    }\r\n\r\n    return <input \r\n        value={text}\r\n        onKeyDown={({ keyCode }) => keydown(keyCode)}\r\n        onChange={({ currentTarget }) => setText(currentTarget.value)} />;\r\n}","import React from \"react\";\r\nimport { TodoItem, update } from \"../store/store\";\r\n\r\ninterface Props {\r\n    item: TodoItem;\r\n}\r\n\r\nexport const TodoListItem = ({ item }: Props) => {\r\n    const toggle = () => {\r\n        update(\"toggle\", item.id);\r\n    }\r\n\r\n    return <li>\r\n        <input type=\"checkbox\" checked={item.done} id={`item_${item.id}`} onChange={() => toggle()} />\r\n        <label htmlFor={`item_${item.id}`}>{item.text}</label>\r\n    </li>\r\n}","import React from \"react\";\r\nimport { useSquawk } from \"../store/store\";\r\nimport { TodoListItem } from \"./TodoListItem\";\r\n\r\nexport const TodoList = () => {\r\n    const { items } = useSquawk(\"items\");\r\n    return <ul>\r\n        {items.map(item => <TodoListItem key={item.id} item={item} />)}\r\n    </ul>\r\n}","import React from \"react\";\r\nimport { event } from \"../store/store\";\r\n\r\nexport const CommandBar = () => {\r\n    const clearAll = () => {\r\n        if(window.confirm(\"Are you sure that you want to remove all items?\")) {\r\n            event(\"clear-all\");\r\n        }\r\n    }\r\n\r\n    const clearCompleted = () => {\r\n        if(window.confirm(\"Are you sure that you want to remove all completed items?\")) {\r\n            event(\"clear-completed\");\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <button onClick={() => clearAll()}>Remove all</button>\r\n        <button onClick={() => clearCompleted()}>Remove all completed</button>\r\n    </div>\r\n}","import React from 'react';\r\nimport { AddTodo } from './components/AddTodo';\r\nimport { TodoList } from './components/TodoList';\r\nimport { CommandBar } from './components/CommandBar';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <AddTodo />\r\n      <CommandBar />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { subscribe, get, update } from \"./store\";\r\n\r\nsubscribe(\"add\", todo => {\r\n    if(!todo) {\r\n        return;\r\n    }\r\n\r\n    todo.id = get(\"id\");\r\n\r\n    update(({ items }) => ({\r\n        id: todo.id + 1,\r\n        items: [...items, todo],\r\n    }));\r\n});\r\n\r\nsubscribe(\"toggle\", id => {\r\n    if(!id) {\r\n        return;\r\n    }\r\n\r\n    update(\"items\", items =>\r\n        items.map(item =>\r\n            ({ ...item, done: item.id === id ? !item.done : item.done })));\r\n});","import { onEvent, update } from \"./store\";\r\n\r\nonEvent(\"clear-all\", () => update({ items: [], id: 1 }));\r\n\r\nonEvent(\"clear-completed\", () => update(\"items\", items => items.filter(item => !item.done)));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport \"./store/subscriptions\";\r\nimport \"./store/events\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}