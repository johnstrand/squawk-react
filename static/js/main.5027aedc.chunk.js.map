{"version":3,"sources":["store/store.ts","components/Link.tsx","components/AddTodo.tsx","components/EditableText.tsx","components/TodoListItem.tsx","components/TodoList.tsx","components/CommandBar.tsx","components/Filter.tsx","App.tsx","serviceWorker.ts","store/subscriptions.ts","store/events.ts","index.tsx"],"names":["createStore","addOrUpdate","id","items","filter","toggle","event","get","onEvent","subscribe","update","useSquawk","Link","props","_props","className","rest","Object","objectWithoutProperties","objectSpread","react_default","a","createElement","children","AddTodo","_useState","useState","_useState2","slicedToArray","text","setText","add","trim","done","value","onKeyDown","_ref","keyCode","onChange","_ref2","currentTarget","Link_Link","disabled","onClick","EditableText","_useState3","_useState4","editing","setEditing","Fragment","e","TodoListItem","item","type","checked","concat","EditableText_EditableText","TodoList","_useSquawk","list","length","map","TodoListItem_TodoListItem","key","CommandBar","window","confirm","Filter","setFilter","f","name","htmlFor","App","AddTodo_AddTodo","CommandBar_CommandBar","Filter_Filter","TodoList_TodoList","Boolean","location","hostname","match","todo","toConsumableArray","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5027aedc.chunk.js","sourcesContent":["import createStore from \"squawk-react\";\r\n\r\nexport interface TodoItem {\r\n    id: number;\r\n    text: string;\r\n    done: boolean;\r\n}\r\n\r\nexport type Filter = \"all\" | \"pending\" | \"completed\";\r\n\r\ntype Events = \"clear-all\" | \"clear-completed\" | \"complete-all\";\r\n\r\ninterface AppState {\r\n    addOrUpdate: TodoItem | null;\r\n    id: number;\r\n    items: TodoItem[];\r\n    filter: Filter;\r\n    toggle: number | null;\r\n}\r\n\r\n// Set up initial value of store\r\nexport const { event, get, onEvent, subscribe, update, useSquawk } = createStore<AppState, Events>({\r\n    addOrUpdate: null,\r\n    id: 1,\r\n    items: [],\r\n    filter: \"all\",\r\n    toggle: null\r\n});","import React from \"react\"\r\n\r\nexport const Link = (props: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>) => {\r\n    let { className, ...rest } = props;\r\n\r\n    className += \" link-button\";\r\n\r\n    props = { ...rest, className };\r\n\r\n    return <button {...props}>{props.children}</button>\r\n}","import React, { useState } from \"react\";\r\nimport { update } from \"../store/store\";\r\nimport { Link } from \"./Link\";\r\n\r\nexport const AddTodo = () => {\r\n    const [text, setText] = useState(\"\");\r\n    const keydown = (key: number) => {\r\n        if (key !== 13) {\r\n            return;\r\n        }\r\n\r\n        add();\r\n    };\r\n\r\n    const add = () => {\r\n        if (!text.trim()) {\r\n            return;\r\n        }\r\n\r\n        update(\"addOrUpdate\", { done: false, id: 0, text: text.trim() });\r\n        setText(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                value={text}\r\n                onKeyDown={({ keyCode }) => keydown(keyCode)}\r\n                onChange={({ currentTarget }) => setText(currentTarget.value)}\r\n            />\r\n            <Link disabled={!text.trim()} onClick={() => add()}>Add</Link>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Link } from \"./Link\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    update: (newText: string) => any;\r\n}\r\n\r\nexport const EditableText = (props: Props) => {\r\n    const [text, setText] = useState(props.text);\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const onKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.keyCode === 10 || e.keyCode === 13) {\r\n            setEditing(false);\r\n            props.update(text);\r\n        }\r\n    }\r\n\r\n    return editing ? <><input value={text} onKeyDown={onKey} onChange={({ currentTarget }) => setText(currentTarget.value)} /></> :\r\n     <>\r\n     <Link onClick={() => setEditing(true)}>{text}</Link>\r\n     </>;\r\n};\r\n","import React from \"react\";\r\nimport { TodoItem, update } from \"../store/store\";\r\nimport { EditableText } from \"./EditableText\";\r\n\r\ninterface Props {\r\n    item: TodoItem;\r\n}\r\n\r\nexport const TodoListItem = ({ item }: Props) => {\r\n    const toggle = () => {\r\n        update(\"toggle\", item.id);\r\n    };\r\n\r\n    return (\r\n        <li>\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={item.done}\r\n                id={`item_${item.id}`}\r\n                onChange={() => toggle()}\r\n            />\r\n            <EditableText text={item.text} update={text => update(\"addOrUpdate\", { ...item, text })} />\r\n        </li>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useSquawk, TodoItem, update } from \"../store/store\";\r\nimport { TodoListItem } from \"./TodoListItem\";\r\nimport { Link } from \"./Link\";\r\n\r\nexport const TodoList = () => {\r\n    const { items, filter } = useSquawk(\"items\", \"filter\");\r\n\r\n    const applyFilter = (item: TodoItem) => {\r\n        return (\r\n            filter === \"all\" ||\r\n            (filter === \"completed\" && item.done) ||\r\n            (filter === \"pending\" && !item.done)\r\n        );\r\n    };\r\n\r\n    const list = items.filter(applyFilter);\r\n\r\n    if (!list.length) {\r\n        return !items.length || filter === \"all\" ? (\r\n            <div>There are no items to display</div>\r\n        ) : (\r\n            <div>\r\n                There are no items to display, you can try setting the filter to\r\n                <Link onClick={() => update(\"filter\", \"all\")}>All</Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            {list.map(item => (\r\n                <TodoListItem key={item.id} item={item} />\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { event } from \"../store/store\";\r\nimport { Link } from \"./Link\";\r\n\r\nexport const CommandBar = () => {\r\n    const clearAll = () => () => {\r\n        if (window.confirm(\"Are you sure that you want to remove all items?\")) {\r\n            event(\"clear-all\");\r\n        }\r\n    };\r\n\r\n    const clearCompleted = () => () => {\r\n        if (\r\n            window.confirm(\r\n                \"Are you sure that you want to remove all completed items?\"\r\n            )\r\n        ) {\r\n            event(\"clear-completed\");\r\n        }\r\n    };\r\n\r\n    const completeAll = () => () => {\r\n        if (\r\n            window.confirm(\r\n                \"Are you sure that you wish to mark all items as completed?\"\r\n            )\r\n        ) {\r\n            event(\"complete-all\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Link onClick={clearAll()}>Remove all</Link>\r\n            <Link onClick={clearCompleted()}>Remove all completed</Link>\r\n            <Link onClick={completeAll()}>Mark all as complete</Link>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useSquawk, Filter as FilterType, update } from \"../store/store\";\r\n\r\nexport const Filter = () => {\r\n    const { filter } = useSquawk(\"filter\");\r\n\r\n    const setFilter = (f: FilterType) => () => {\r\n        update(\"filter\", f);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>Filter: </span>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"all\"\r\n                name=\"filter\"\r\n                checked={filter === \"all\"}\r\n                onChange={setFilter(\"all\")}\r\n            />\r\n            <label htmlFor=\"all\">All</label>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"pending\"\r\n                name=\"filter\"\r\n                checked={filter === \"pending\"}\r\n                onChange={setFilter(\"pending\")}\r\n            />\r\n            <label htmlFor=\"pending\">Pending</label>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"completed\"\r\n                name=\"filter\"\r\n                checked={filter === \"completed\"}\r\n                onChange={setFilter(\"completed\")}\r\n            />\r\n            <label htmlFor=\"completed\">Completed</label>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { AddTodo } from './components/AddTodo';\r\nimport { TodoList } from './components/TodoList';\r\nimport { CommandBar } from './components/CommandBar';\r\nimport { Filter } from './components/Filter';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <AddTodo />\r\n      <CommandBar />\r\n      <Filter />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { subscribe, get, update } from \"./store\";\r\n\r\nsubscribe(\"addOrUpdate\", todo => {\r\n    if(!todo) {\r\n        return;\r\n    }\r\n\r\n    if(todo.id) {\r\n        update(\"items\", items => items.map(item => item.id === todo.id ? todo : item));\r\n        return;\r\n    }\r\n\r\n    todo.id = get(\"id\");\r\n\r\n    update(({ items }) => ({\r\n        id: todo.id + 1,\r\n        items: [...items, todo],\r\n    }));\r\n});\r\n\r\nsubscribe(\"toggle\", id => {\r\n    if(!id) {\r\n        return;\r\n    }\r\n\r\n    update(\"items\", items =>\r\n        items.map(item =>\r\n            ({ ...item, done: item.id === id ? !item.done : item.done })));\r\n});","import { onEvent, update } from \"./store\";\r\n\r\nonEvent(\"clear-all\", () => update({ items: [], id: 1 }));\r\n\r\nonEvent(\"clear-completed\", () =>\r\n    update(\"items\", items => items.filter(item => !item.done))\r\n);\r\n\r\nonEvent(\"complete-all\", () =>\r\n    update(\"items\", items => items.map(item => ({ ...item, done: true })))\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport \"./store/subscriptions\";\r\nimport \"./store/events\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}