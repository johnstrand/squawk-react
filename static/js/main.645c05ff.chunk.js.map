{"version":3,"sources":["components/Link.tsx","store/store.ts","store/actions.ts","components/AddTodo.tsx","components/EditableText.tsx","components/TodoListItem.tsx","components/TodoList.tsx","components/CommandBar.tsx","components/Filter.tsx","App.tsx","serviceWorker.ts","store/events.ts","index.tsx"],"names":["Link","props","className","children","createStore","id","items","filter","action","event","onEvent","get","update","subscribe","useSquawk","toggleTodo","store","map","item","done","addTodo","updateTodo","i","AddTodo","useState","text","setText","add","trim","value","onKeyDown","keyCode","onChange","currentTarget","disabled","onClick","EditableText","editing","setEditing","e","TodoListItem","type","checked","TodoList","list","length","key","CommandBar","window","confirm","Filter","setFilter","f","name","htmlFor","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.645c05ff.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport const Link = (props: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>) => {\r\n    let { className, ...rest } = props;\r\n\r\n    className += \" link-button\";\r\n\r\n    props = { ...rest, className };\r\n\r\n    return <button {...props}>{props.children}</button>\r\n}","import createStore from \"squawk-react\";\r\n\r\nexport interface TodoItem {\r\n    id: number;\r\n    text: string;\r\n    done: boolean;\r\n}\r\n\r\nexport type Filter = \"all\" | \"pending\" | \"completed\";\r\n\r\ntype Events = \"clear-all\" | \"clear-completed\" | \"complete-all\";\r\n\r\ninterface AppState {\r\n    id: number;\r\n    items: TodoItem[];\r\n    filter: Filter;\r\n}\r\n\r\n// Set up initial value of store\r\nexport const { action, event, get, onEvent, subscribe, update, useSquawk } = createStore<AppState, Events>({\r\n    id: 1,\r\n    items: [],\r\n    filter: \"all\"\r\n});","import { action, TodoItem } from \"./store\";\r\n\r\nexport const toggleTodo = action<number>((store, id) => {\r\n    return {\r\n        items: store.items.map(item =>\r\n            item.id === id ? { ...item, done: !item.done } : item\r\n        )\r\n    };\r\n});\r\n\r\nexport const addTodo = action<TodoItem>((store, item) => {\r\n    item.id = store.id + 1;\r\n    return { items: [...store.items, item], id: item.id };\r\n});\r\n\r\nexport const updateTodo = action<TodoItem>((store, item) => {\r\n    return { items: store.items.map(i => (i.id === item.id ? item : i)) };\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"./Link\";\r\nimport { addTodo } from \"../store/actions\";\r\n\r\nexport const AddTodo = () => {\r\n    const [text, setText] = useState(\"\");\r\n    const keydown = (key: number) => {\r\n        if (key !== 13) {\r\n            return;\r\n        }\r\n\r\n        add();\r\n    };\r\n\r\n    const add = () => {\r\n        if (!text.trim()) {\r\n            return;\r\n        }\r\n\r\n        addTodo({ done: false, id: 0, text: text.trim() });\r\n        setText(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                value={text}\r\n                onKeyDown={({ keyCode }) => keydown(keyCode)}\r\n                onChange={({ currentTarget }) => setText(currentTarget.value)}\r\n            />\r\n            <Link disabled={!text.trim()} onClick={() => add()}>Add</Link>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"./Link\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    update: (newText: string) => any;\r\n}\r\n\r\nexport const EditableText = (props: Props) => {\r\n    const [text, setText] = useState(props.text);\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const onKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.keyCode === 10 || e.keyCode === 13) {\r\n            setEditing(false);\r\n            props.update(text);\r\n        }\r\n    }\r\n\r\n    return editing ? <><input value={text} onKeyDown={onKey} onChange={({ currentTarget }) => setText(currentTarget.value)} /></> :\r\n     <>\r\n     <Link onClick={() => setEditing(true)}>{text}</Link>\r\n     </>;\r\n};\r\n","import React from \"react\";\r\nimport { TodoItem } from \"../store/store\";\r\nimport { EditableText } from \"./EditableText\";\r\nimport { updateTodo, toggleTodo } from \"../store/actions\";\r\n\r\ninterface Props {\r\n    item: TodoItem;\r\n}\r\n\r\nexport const TodoListItem = ({ item }: Props) => {\r\n\r\n    return (\r\n        <li>\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={item.done}\r\n                id={`item_${item.id}`}\r\n                onChange={() => toggleTodo(item.id)}\r\n            />\r\n            <EditableText text={item.text} update={text => updateTodo({ ...item, text })} />\r\n        </li>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useSquawk, TodoItem, update } from \"../store/store\";\r\nimport { TodoListItem } from \"./TodoListItem\";\r\nimport { Link } from \"./Link\";\r\n\r\nexport const TodoList = () => {\r\n    const { items, filter } = useSquawk(\"items\", \"filter\");\r\n\r\n    const applyFilter = (item: TodoItem) => {\r\n        return (\r\n            filter === \"all\" ||\r\n            (filter === \"completed\" && item.done) ||\r\n            (filter === \"pending\" && !item.done)\r\n        );\r\n    };\r\n\r\n    const list = items.filter(applyFilter);\r\n\r\n    if (!list.length) {\r\n        return !items.length || filter === \"all\" ? (\r\n            <div>There are no items to display</div>\r\n        ) : (\r\n            <div>\r\n                There are no items to display, you can try setting the filter to\r\n                <Link onClick={() => update(\"filter\", \"all\")}>All</Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            {list.map(item => (\r\n                <TodoListItem key={item.id} item={item} />\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { event } from \"../store/store\";\r\nimport { Link } from \"./Link\";\r\n\r\nexport const CommandBar = () => {\r\n    const clearAll = () => () => {\r\n        if (window.confirm(\"Are you sure that you want to remove all items?\")) {\r\n            event(\"clear-all\");\r\n        }\r\n    };\r\n\r\n    const clearCompleted = () => () => {\r\n        if (\r\n            window.confirm(\r\n                \"Are you sure that you want to remove all completed items?\"\r\n            )\r\n        ) {\r\n            event(\"clear-completed\");\r\n        }\r\n    };\r\n\r\n    const completeAll = () => () => {\r\n        if (\r\n            window.confirm(\r\n                \"Are you sure that you wish to mark all items as completed?\"\r\n            )\r\n        ) {\r\n            event(\"complete-all\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Link onClick={clearAll()}>Remove all</Link>\r\n            <Link onClick={clearCompleted()}>Remove all completed</Link>\r\n            <Link onClick={completeAll()}>Mark all as complete</Link>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useSquawk, Filter as FilterType, update } from \"../store/store\";\r\n\r\nexport const Filter = () => {\r\n    const { filter } = useSquawk(\"filter\");\r\n\r\n    const setFilter = (f: FilterType) => () => {\r\n        update(\"filter\", f);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>Filter: </span>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"all\"\r\n                name=\"filter\"\r\n                checked={filter === \"all\"}\r\n                onChange={setFilter(\"all\")}\r\n            />\r\n            <label htmlFor=\"all\">All</label>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"pending\"\r\n                name=\"filter\"\r\n                checked={filter === \"pending\"}\r\n                onChange={setFilter(\"pending\")}\r\n            />\r\n            <label htmlFor=\"pending\">Pending</label>\r\n            <input\r\n                type=\"radio\"\r\n                id=\"completed\"\r\n                name=\"filter\"\r\n                checked={filter === \"completed\"}\r\n                onChange={setFilter(\"completed\")}\r\n            />\r\n            <label htmlFor=\"completed\">Completed</label>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { AddTodo } from './components/AddTodo';\r\nimport { TodoList } from './components/TodoList';\r\nimport { CommandBar } from './components/CommandBar';\r\nimport { Filter } from './components/Filter';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <AddTodo />\r\n      <CommandBar />\r\n      <Filter />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { onEvent, update } from \"./store\";\r\n\r\nonEvent(\"clear-all\", () => update({ items: [], id: 1 }));\r\n\r\nonEvent(\"clear-completed\", () =>\r\n    update(\"items\", items => items.filter(item => !item.done))\r\n);\r\n\r\nonEvent(\"complete-all\", () =>\r\n    update(\"items\", items => items.map(item => ({ ...item, done: true })))\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport \"./store/events\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}